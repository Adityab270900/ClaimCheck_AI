Your task is to build an MVP of “Pakhand Bhedi” (Paranormal Debunking AI) using provided sample datasets. Follow these steps:

1. **Data Ingestion & Preprocessing**  
   • Load sample datasets for paranormal claims (CSV/JSON) and a small corpus of “myth” articles (PDFs, text files).  
   • Clean text: remove HTML, normalize punctuation, lowercase.  
   • Segment long documents into passages (e.g., 200–300 words).

2. **Knowledge Base & Embeddings**  
   • Generate sentence‑ or passage‑level embeddings using a pretrained model (e.g., `sentence-transformers`).  
   • Index embeddings in a vector store (e.g., FAISS).  
   • Store metadata: source ID, passage text, publication date.

3. **Retrieval-Augmented Generation (RAG) Setup**  
   • For each input claim, embed the claim text.  
   • Perform a k‑NN search (k=5–10) against the vector store to retrieve top evidence passages.  
   • Return both the passages and their metadata.

4. **Claim Analysis & Debunking**  
   • Compare the claim against retrieved evidence using a small LLM or rule‑based logic:  
     – Extract key facts from evidence.  
     – Detect contradictions or unsupported assertions.  
   • Assign a verdict: “Debunked,” “Unsupported,” or “Requires Further Research.”  
   • Generate a concise explanation citing passage IDs and source names.

5. **Uncertainty & Transparency**  
   • Report retrieval similarity scores for each passage.  
   • Optionally, bootstrap multiple retrieval runs (e.g., different embedding seeds) to show variation in top‑k results.  
   • Highlight any low‑confidence areas (similarity < 0.6) for manual review.

6. **Simple Frontend**  
   • Build a minimal Streamlit or Flask app:  
     – Input field for user’s paranormal claim.  
     – Display retrieved passages, similarity scores, verdict, and explanation.  
   • Include filters by source date or domain (e.g., “ghost myths,” “astrology,” “UFOs”).

7. **Deliverables**  
   • A Jupyter notebook or Python script using pandas, PyPDF2 (or similar), `sentence-transformers`, FAISS, and a lightweight LLM API.  
   • Sample input/output examples: at least 3 distinct paranormal claims with full debunking outputs.  
   • A runnable prototype (Streamlit/Flask) demonstrating end‑to‑end flow on sample datasets.